/* Author:

*/

$(function() {

  /**************************
   * Models
   **************************/

  var <%= metadata.className %> = Backbone.Model.extend({
    
    defaults: function() {
      return {
        <% for (field in metadata.fields) { %>
        <%= field %>: '',
        <% } %>
      }
    },
    
    idAttribute: '_id',

    initialize: function() {
      var selectable = new Backbone.Picky.Selectable(this);
      _.extend(this, selectable);
    }
  });

  var <%= metadata.name%>List = Backbone.Collection.extend({
    
    model: <%= metadata.className %>,
    
    url: '/lists.json/<%= metadata.name %>',
    
    initialize: function() {
      var multiSelect = new Backbone.Picky.MultiSelect(this);
      _.extend(this, multiSelect);
    }

  });
  
  var <%= metadata.name %> = new <%= metadata.name %>List;
  
  var <%= metadata.className %>View = Backbone.View.extend({
    
    tagName: 'tr',
    
    template: $('#listItemTemplate').text(),
    
    events: {
      'click input[type="checkbox"].selector' : 'select',
    },
    
    initialize: function() {
      this.model.bind('change', this.render, this);
      this.model.bind('destroy', this.remove, this);
      this.model.bind('selected', this.selected, this);
      this.model.bind('deselected', this.deselected, this);
    },
    
    render: function() {
      this.$el.html(Mustache.render(this.template, this.model.toJSON()));
      return this;
    },
    
    select: function() {
      this.model.toggleSelected();
    },
    
    selected: function(e) {
      this.$('input[type="checkbox"].selector').attr('checked', true);
    },

    deselected: function(e) {
      this.$('input[type="checkbox"].selector').attr('checked', false);
    },
  });
  
  var NewItemView = Backbone.View.extend({
    el: $('#newItemModal'),

    events: {
      'click #addItemCancel'  : 'cancel',
      'click #addItemSubmit'  : 'submit',
      'submit #newItemForm'   : 'submit',
      'shown'                 : 'shown',
      'hide'                  : 'hide',
    },
    
    initialize: function() {
      this._modelBinder = new Backbone.ModelBinder();
            
      this.render();
    },
    
    render: function() {
      this._modelBinder.bind(this.model, this.el);
    },
    
    close: function() {
      this._modelBinder.unbind();
    },
    
    show: function() {
      this.$el.modal('show');
    },
    
    shown: function() {
      this.$('input').first().focus();
    },
    
    hide: function() {
      this.model.set(this.model.defaults());
    },
    
    cancel: function(e) {
      this.$el.modal('hide');
    },
    
    submit: function(e) {
      e.preventDefault();
      <%= metadata.name %>.create(this.model.toJSON());
      this.$el.modal('hide');
    },
  });  

  var EditItemView = Backbone.View.extend({
    el: $('#editItemModal'),
    
    events: {
      'shown'   : 'onShown',
    },
    
    initialize: function() {
      this._modelBinder = new Backbone.ModelBinder();
      
      this.render();
      
      this.$el.modal('show');
    },
    
    render: function() {
      this._modelBinder.bind(this.model, this.el);
    },
    
    onShown: function() {
      this.$('input').first().focus();
    },
    
    cancel: function(e) {
      this.$el.modal('hide');
    },
    
    submit: function(e) {
      e.preventDefault();
      this.$el.modal('hide');
    }
  })

  var AppView = Backbone.View.extend({
    el: $('#listview'),
    
    events: {
      'click #refresh'        : 'refresh',
      'click #addItem'        : 'addNewItem',
      'click #delete'         : 'delete',
      'click #selectAll'      : 'toggleSelectAll',
      'click #editItem'       : 'editItem',
    },
    
    initialize: function() {

      this.table = this.$('tbody');
      
      this.newItemView = new NewItemView({
        model: new <%= metadata.className %>,
      });
      
      // bind model events
      <%= metadata.name %>.bind('add', this.addOne, this);
      <%= metadata.name %>.bind('reset', this.addAll, this);
      <%= metadata.name %>.bind('all', this.render, this);
      <%= metadata.name %>.bind('select:some', this.selectedSome, this);
      <%= metadata.name %>.bind('select:all', this.selectedAll, this);
      <%= metadata.name %>.bind('select:none', this.deselected, this);

      <%= metadata.name %>.fetch();
    },
    
    render: function() {
      return this;
    },
    
    refresh: function(e) {
      
    },
    
    addNewItem: function(e) {
      this.newItemView.show();
    },
    
    delete: function(e) {
      // TODO: pop up a confirmation dialog
      for(var i in <%= metadata.name %>.selected) {
        var selected = <%= metadata.name %>.selected[i];
        selected.deselect();
        selected.destroy({wait: true});
      }
    },
    
    editItem: function(e) {
      for (var i in <%= metadata.name %>.selected) {
        var editView = new EditItemView({
          model: <%= metadata.name %>.selected[i]
        });
      }
    },
    
    addOne: function(item) {
      var view = new <%= metadata.className %>View({
        model: item
      });
      this.table.append(view.render().el);
    },
    
    addAll: function() {
      <%= metadata.name %>.each($.proxy(this.addOne, this));
    },

    enableDeleteButton: function() {
      this.$('#delete')
        .removeClass('disabled')
        .removeAttr('disabled');
    },
    
    disableDeleteButton: function() {
      this.$('#delete')
        .addClass('disabled')
        .attr('disabled', 'disabled');
    },
    
    enableEditButton: function() {
      this.$('#editItem')
        .removeClass('disabled')
        .removeAttr('disabled');
    },
    
    disableEditButton: function() {
      this.$('#editItem')
        .addClass('disabled')
        .attr('disabled', 'disabled');
    },
    
    selectedSome: function(e) {
      this.enableDeleteButton();
      if (<%= metadata.name %>.selectedLength == 1) {
        this.enableEditButton();
      }
      else {
        this.disableEditButtion();
      }
    },
    
    selectedAll: function(e) {
      this.enableDeleteButton();
      if (<%= metadata.name %>.selectedLength == 1) {
        this.enableEditButton();
      }
      else {
        this.disableEditButton();
      }
    },
    
    deselected: function(e) {
      this.disableDeleteButton();
      this.disableEditButton();
    },
    
    toggleSelectAll: function(e) {
      <%= metadata.name %>.toggleSelectAll();
    }
  });
  
  var App = new AppView;
  
}) 
